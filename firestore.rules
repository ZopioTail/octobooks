
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Public read access for books (anyone can read books)
    match /books/{bookId} {
      allow read: if request.auth != null || resource.data.published == true;
      allow write: if request.auth != null && (
        // Authors can write their own books
        (request.auth.token.role == 'author' && resource.data.authorId == request.auth.uid) ||
        // Publishers can write books they publish
        (request.auth.token.role == 'publisher' && resource.data.publisherId == request.auth.uid) ||
        // Admins can write all books
        request.auth.token.role == 'admin'
      );
      allow create: if request.auth != null && (
        // Authors can create books
        request.auth.token.role == 'author' ||
        // Publishers can create books
        request.auth.token.role == 'publisher' ||
        // Admins can create books
        request.auth.token.role == 'admin'
      );
      allow delete: if request.auth != null && (
        // Authors can delete their own books
        (request.auth.token.role == 'author' && resource.data.authorId == request.auth.uid) ||
        // Publishers can delete books they publish
        (request.auth.token.role == 'publisher' && resource.data.publisherId == request.auth.uid) ||
        // Admins can delete all books
        request.auth.token.role == 'admin'
      );
    }

    // Users collection - restricted access
    match /users/{userId} {
      allow read: if request.auth != null && (
        // Users can read their own profile
        request.auth.uid == userId ||
        // Admins can read all profiles
        request.auth.token.role == 'admin'
      );
      allow write: if request.auth != null && (
        // Users can update their own profile
        (request.auth.uid == userId && 
         request.resource.data.role == resource.data.role) || // Cannot change own role
        // Admins can update all profiles
        request.auth.token.role == 'admin'
      );
      allow create: if request.auth != null && (
        // Only admins can create user profiles
        request.auth.token.role == 'admin' ||
        // Users can create their own profile during registration
        request.auth.uid == userId
      );
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if request.auth != null && (
        // Customers can read their own orders
        resource.data.userId == request.auth.uid ||
        // Admins can read all orders
        request.auth.token.role == 'admin' ||
        // Authors can read orders containing their books
        (request.auth.token.role == 'author' && 
         resource.data.books[0].authorId == request.auth.uid) ||
        // Publishers can read orders containing their books
        (request.auth.token.role == 'publisher' && 
         resource.data.books[0].publisherId == request.auth.uid)
      );
      allow write: if request.auth != null && (
        // Customers can create orders
        (request.auth.token.role == 'customer' && request.write) ||
        // Admins can update orders
        request.auth.token.role == 'admin'
      );
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Anyone can read reviews
      allow write: if request.auth != null && (
        // Customers can create reviews for books they purchased
        (request.auth.token.role == 'customer' && 
         request.resource.data.userId == request.auth.uid) ||
        // Admins can manage all reviews
        request.auth.token.role == 'admin'
      );
      allow update, delete: if request.auth != null && (
        // Users can update/delete their own reviews
        resource.data.userId == request.auth.uid ||
        // Admins can update/delete all reviews
        request.auth.token.role == 'admin'
      );
    }

    // Sales collection (for royalty tracking)
    match /sales/{saleId} {
      allow read: if request.auth != null && (
        // Admins can read all sales
        request.auth.token.role == 'admin' ||
        // Authors can read their own sales
        resource.data.authorId == request.auth.uid ||
        // Publishers can read their own sales
        resource.data.publisherId == request.auth.uid
      );
      allow write: if request.auth.token.role == 'admin'; // Only admins can write sales data
    }

    // Publishers collection
    match /publishers/{publisherId} {
      allow read: if true; // Anyone can read publisher info
      allow write: if request.auth != null && (
        // Publishers can update their own info
        (request.auth.token.role == 'publisher' && publisherId == request.auth.uid) ||
        // Admins can manage all publishers
        request.auth.token.role == 'admin'
      );
    }

    // Authors collection
    match /authors/{authorId} {
      allow read: if true; // Anyone can read author info
      allow write: if request.auth != null && (
        // Authors can update their own info
        (request.auth.token.role == 'author' && authorId == request.auth.uid) ||
        // Admins can manage all authors
        request.auth.token.role == 'admin' ||
        // Publishers can update authors they work with
        (request.auth.token.role == 'publisher' &&
         resource.data.publisherId == request.auth.uid)
      );
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if true; // Anyone can read categories
      allow write: if request.auth.token.role == 'admin'; // Only admins can manage categories
    }

    // Coupons collection
    match /coupons/{couponId} {
      allow read: if true; // Anyone can read coupons
      allow write: if request.auth != null && (
        // Authors can create coupons with max 10% discount
        (request.auth.token.role == 'author' &&
         request.resource.data.discount <= 10) ||
        // Admins can create any coupons
        request.auth.token.role == 'admin'
      );
      allow update, delete: if request.auth != null && (
        // Authors can update/delete their own coupons
        (request.auth.token.role == 'author' &&
         resource.data.authorId == request.auth.uid) ||
        // Admins can manage all coupons
        request.auth.token.role == 'admin'
      );
    }

    // Wishlist collection
    match /wishlist/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Cart collection
    match /cart/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Admin settings collection
    match /settings/{settingsId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'admin';
    }

    // Audit logs collection
    match /audit_logs/{logId} {
      allow read: if request.auth.token.role == 'admin';
      allow write: if request.auth.token.role == 'admin';
    }
  }
}